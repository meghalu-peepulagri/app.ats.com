/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as HeaderRouteImport } from './routes/_header'
import { Route as IndexRouteImport } from './routes/index'
import { Route as HeaderApplicantsRouteImport } from './routes/_header/_applicants'
import { Route as HeaderAdd_userIndexRouteImport } from './routes/_header/add_user/index'
import { Route as HeaderApplicantsApplicantsIndexRouteImport } from './routes/_header/_applicants/applicants/index'
import { Route as HeaderApplicantsApplicantsApplicant_idIndexRouteImport } from './routes/_header/_applicants/applicants/$applicant_id/index'

const HeaderRoute = HeaderRouteImport.update({
  id: '/_header',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const HeaderApplicantsRoute = HeaderApplicantsRouteImport.update({
  id: '/_applicants',
  getParentRoute: () => HeaderRoute,
} as any)
const HeaderAdd_userIndexRoute = HeaderAdd_userIndexRouteImport.update({
  id: '/add_user/',
  path: '/add_user/',
  getParentRoute: () => HeaderRoute,
} as any)
const HeaderApplicantsApplicantsIndexRoute =
  HeaderApplicantsApplicantsIndexRouteImport.update({
    id: '/applicants/',
    path: '/applicants/',
    getParentRoute: () => HeaderApplicantsRoute,
  } as any)
const HeaderApplicantsApplicantsApplicant_idIndexRoute =
  HeaderApplicantsApplicantsApplicant_idIndexRouteImport.update({
    id: '/applicants/$applicant_id/',
    path: '/applicants/$applicant_id/',
    getParentRoute: () => HeaderApplicantsRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/add_user': typeof HeaderAdd_userIndexRoute
  '/applicants': typeof HeaderApplicantsApplicantsIndexRoute
  '/applicants/$applicant_id': typeof HeaderApplicantsApplicantsApplicant_idIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/add_user': typeof HeaderAdd_userIndexRoute
  '/applicants': typeof HeaderApplicantsApplicantsIndexRoute
  '/applicants/$applicant_id': typeof HeaderApplicantsApplicantsApplicant_idIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_header': typeof HeaderRouteWithChildren
  '/_header/_applicants': typeof HeaderApplicantsRouteWithChildren
  '/_header/add_user/': typeof HeaderAdd_userIndexRoute
  '/_header/_applicants/applicants/': typeof HeaderApplicantsApplicantsIndexRoute
  '/_header/_applicants/applicants/$applicant_id/': typeof HeaderApplicantsApplicantsApplicant_idIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/add_user' | '/applicants' | '/applicants/$applicant_id'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/add_user' | '/applicants' | '/applicants/$applicant_id'
  id:
    | '__root__'
    | '/'
    | '/_header'
    | '/_header/_applicants'
    | '/_header/add_user/'
    | '/_header/_applicants/applicants/'
    | '/_header/_applicants/applicants/$applicant_id/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  HeaderRoute: typeof HeaderRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_header': {
      id: '/_header'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof HeaderRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_header/_applicants': {
      id: '/_header/_applicants'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof HeaderApplicantsRouteImport
      parentRoute: typeof HeaderRoute
    }
    '/_header/add_user/': {
      id: '/_header/add_user/'
      path: '/add_user'
      fullPath: '/add_user'
      preLoaderRoute: typeof HeaderAdd_userIndexRouteImport
      parentRoute: typeof HeaderRoute
    }
    '/_header/_applicants/applicants/': {
      id: '/_header/_applicants/applicants/'
      path: '/applicants'
      fullPath: '/applicants'
      preLoaderRoute: typeof HeaderApplicantsApplicantsIndexRouteImport
      parentRoute: typeof HeaderApplicantsRoute
    }
    '/_header/_applicants/applicants/$applicant_id/': {
      id: '/_header/_applicants/applicants/$applicant_id/'
      path: '/applicants/$applicant_id'
      fullPath: '/applicants/$applicant_id'
      preLoaderRoute: typeof HeaderApplicantsApplicantsApplicant_idIndexRouteImport
      parentRoute: typeof HeaderApplicantsRoute
    }
  }
}

interface HeaderApplicantsRouteChildren {
  HeaderApplicantsApplicantsIndexRoute: typeof HeaderApplicantsApplicantsIndexRoute
  HeaderApplicantsApplicantsApplicant_idIndexRoute: typeof HeaderApplicantsApplicantsApplicant_idIndexRoute
}

const HeaderApplicantsRouteChildren: HeaderApplicantsRouteChildren = {
  HeaderApplicantsApplicantsIndexRoute: HeaderApplicantsApplicantsIndexRoute,
  HeaderApplicantsApplicantsApplicant_idIndexRoute:
    HeaderApplicantsApplicantsApplicant_idIndexRoute,
}

const HeaderApplicantsRouteWithChildren =
  HeaderApplicantsRoute._addFileChildren(HeaderApplicantsRouteChildren)

interface HeaderRouteChildren {
  HeaderApplicantsRoute: typeof HeaderApplicantsRouteWithChildren
  HeaderAdd_userIndexRoute: typeof HeaderAdd_userIndexRoute
}

const HeaderRouteChildren: HeaderRouteChildren = {
  HeaderApplicantsRoute: HeaderApplicantsRouteWithChildren,
  HeaderAdd_userIndexRoute: HeaderAdd_userIndexRoute,
}

const HeaderRouteWithChildren =
  HeaderRoute._addFileChildren(HeaderRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  HeaderRoute: HeaderRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
